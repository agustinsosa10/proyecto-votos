/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.ema.proyectofinal;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.LocalTime;

/**
 *
 * @author Agustin Sosa
 */
public class Menu extends javax.swing.JFrame implements Incidencia{

    Clases.CConexion Conexion = new Clases.CConexion();
    int votosEnBlanco = 0;
    
    public Menu() {
        initComponents();
        checkHour();
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnCierreMesa = new javax.swing.JButton();
        btnConsultarDatos = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        CerrarSesion = new javax.swing.JMenuItem();
        AgregarUsuario = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel1.setText("MENU");

        btnCierreMesa.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        btnCierreMesa.setText("CIERRE MESA");
        btnCierreMesa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCierreMesaActionPerformed(evt);
            }
        });

        btnConsultarDatos.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        btnConsultarDatos.setText("CONSULTAR DATOS");
        btnConsultarDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarDatosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnCierreMesa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnConsultarDatos, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(btnConsultarDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(btnCierreMesa, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        CerrarSesion.setText("Cerrar Sesion");
        CerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CerrarSesionActionPerformed(evt);
            }
        });
        jMenu1.add(CerrarSesion);

        AgregarUsuario.setText("Agregar Usuario");
        AgregarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregarUsuarioActionPerformed(evt);
            }
        });
        jMenu1.add(AgregarUsuario);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConsultarDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarDatosActionPerformed
        consultaDatos consulta = new consultaDatos();
        consulta.setVisible(true);
        consulta.setLocationRelativeTo(null);
        this.dispose();
        
    }//GEN-LAST:event_btnConsultarDatosActionPerformed

    private void btnCierreMesaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCierreMesaActionPerformed
        cerrarMesa();    
    }//GEN-LAST:event_btnCierreMesaActionPerformed

    private void CerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CerrarSesionActionPerformed
        Login login = new Login();
        JOptionPane.showMessageDialog(null, "Sesion Cerrada");
        login.setVisible(true);
        login.setLocationRelativeTo(null);
        this.dispose();       
        Conexion.desconectar();
        
    }//GEN-LAST:event_CerrarSesionActionPerformed

    public void checkHour (){
        
        ZoneId argentinaZone = ZoneId.of("America/Argentina/Buenos_Aires");
        ZonedDateTime nowInArgentina = ZonedDateTime.now(argentinaZone);

        // Crear un objeto ZonedDateTime para las 6 de la tarde en Argentina
        ZonedDateTime sixPMInArgentina = nowInArgentina.with(LocalTime.of(23, 23));

        // Comparar la hora actual con las 6 de la tarde
        if (nowInArgentina.isBefore(sixPMInArgentina)) {
            //aca va que es lo que pasa antes de las 6            
            System.out.println("La hora actual en Argentina es antes de las 6 de la tarde.");
            btnCierreMesa.setEnabled(false);
        } else{
            //aca va que es lo que pasa después de las 6
            btnCierreMesa.setEnabled(true);
            btnConsultarDatos.setEnabled(false);
            System.out.println("La hora actual en Argentina es despues de las 6 de la tarde.");
        }
    } 
    private void AgregarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregarUsuarioActionPerformed
        AgregarUsuario agregaruser = new AgregarUsuario();
        agregaruser.setVisible(true);
        agregaruser.setLocationRelativeTo(null);
        this.dispose();     
    }//GEN-LAST:event_AgregarUsuarioActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AgregarUsuario;
    private javax.swing.JMenuItem CerrarSesion;
    private javax.swing.JButton btnCierreMesa;
    private javax.swing.JButton btnConsultarDatos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

  
    private void cerrarMesa() {
        registrarIncidencia("INFO", "SE REALIZA EL CIERRE DE MESA.");
        String ingresoUsuario = JOptionPane.showInputDialog("Ingrese su nombre de usuario");
        char[] contrasena = JOptionPane.showInputDialog("Ingrese su contraseña").toCharArray();

        try {
            if (validarUsuario(ingresoUsuario, contrasena)) {
                realizarConteoVotos();
                btnCierreMesa.setEnabled(false);
                registrarIncidencia("INFO", "FINALIZACION DE CONTEO.");
            } else {
                JOptionPane.showMessageDialog(null, "Nombre de usuario o contraseña incorrectos");
                registrarIncidencia("WARNING", "DATOS INCORRECTOS.");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error" + e.toString());
        }
    }
    private boolean validarUsuario(String ingresoUsuario, char[] contrasena) throws SQLException {
        String consulta = "SELECT * FROM login WHERE usuario=? AND contrasenia=?";
        try (PreparedStatement ps = Conexion.estableceConexion().prepareStatement(consulta)) {
            ps.setString(1, ingresoUsuario);
            ps.setString(2, new String(contrasena));
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    //boolean sesionIniciada = rs.getBoolean("sesion_iniciada");
                    //if (!sesionIniciada) {
                        JOptionPane.showMessageDialog(null, "El usuario es correcto");
                        /*consultaDatos consultar = new consultaDatos();
                        consultar.setVisible(true);
                        consultar.setLocationRelativeTo(null);
                        this.dispose();*/
                        btnConsultarDatos.setEnabled(false);
                        registrarIncidencia("INFO", "LOGEO CORRECTO.");
                        return true;
                    //} else {
                    //    JOptionPane.showMessageDialog(null, "El usuario ya ha iniciado sesión");
                    //}
                } else {
                    JOptionPane.showMessageDialog(null, "El usuario es incorrecto,vuelva a intentar");
                }
            }
        }
        return false;
    }
    private void realizarConteoVotos() throws SQLException {
        
        String consultaVotos = "SELECT Id, nombre, Total FROM candidatos";
        try (PreparedStatement psVotos = Conexion.estableceConexion().prepareStatement(consultaVotos)) {
            try (ResultSet rsVotos = psVotos.executeQuery()) {
                int maxVotos = 0;
                List<String> candidatosConMasVotos = new ArrayList<>();
                StringBuilder votosStr = new StringBuilder();
                int totalVotos = 0;
                Map<String, Integer> votosCandidatos = new HashMap<>();
                while (rsVotos.next()) {
                    String nombreCandidato = rsVotos.getString("nombre");
                    int votosTotal = rsVotos.getInt("Total");
                    totalVotos += votosTotal;
                    votosCandidatos.put(nombreCandidato, votosTotal);
                    if (votosTotal > maxVotos) {
                        maxVotos = votosTotal;
                        candidatosConMasVotos.clear();
                        candidatosConMasVotos.add(nombreCandidato);
                    } else if (votosTotal == maxVotos) {
                        candidatosConMasVotos.add(nombreCandidato);
                    }
                }
                for (Map.Entry<String, Integer> entry : votosCandidatos.entrySet()) {
                    double porcentaje = ((double) entry.getValue() / totalVotos) * 100;
                    votosStr.append(entry.getKey()).append(": ").append(String.format("%.2f", porcentaje)).append("%\n");
                }
                registrarIncidencia("INFO", "CONTEO DE VOTOS.");
                if (candidatosConMasVotos.size() > 1) {
                    JOptionPane.showMessageDialog(null, "Hay un empate entre los siguientes candidatos: " + String.join(", ", candidatosConMasVotos) + ". Se necesitará un balotaje.\n\n" + votosStr.toString());
                } else {
                    agregarVotosEnBlanco(candidatosConMasVotos.get(0));
                    JOptionPane.showMessageDialog(null, "El candidato que ganó la elección es: " + candidatosConMasVotos.get(0) + "\n\n" + votosStr.toString());
                }
            }
        }
    }
    private void agregarVotosEnBlanco(String candidatoConMasVotos) throws SQLException {
        String consulta2 = "UPDATE candidatos SET Total = Total + ? WHERE nombre = ?";
        try (PreparedStatement ps2 = Conexion.estableceConexion().prepareStatement(consulta2)) {
            ps2.setInt(1, votosEnBlanco);
            ps2.setString(2, candidatoConMasVotos);
            int rowsUpdated = ps2.executeUpdate();
        }
    }

    @Override
    public void registrarIncidencia(String nivel, String mensaje) {
        try {
            String consulta = "INSERT INTO incidencias (Nivel, mensaje) VALUES (?, ?)";
            PreparedStatement ps = Conexion.estableceConexion().prepareStatement(consulta);
            ps.setString(1, nivel);
            ps.setString(2, mensaje);
            int rowsInserted = ps.executeUpdate();
        } catch(SQLException e){
            JOptionPane.showMessageDialog(null, "Error"+e.toString());
        }
    }
}